[{"text": "# include \"esx/esx_vi_types.h\"\nstruct testPath {\n    const char *datastorePath;\n    int result;\n    const char *datastoreName;\n    const char *directoryName;\n    const char *directoryAndFileName;\n};\nstatic struct testPath paths[] = {\n    { \"[datastore] directory/file\", 0, \"datastore\", \"directory\",\n", "label": "CODE"}, {"text": "        VIR_CRED_ECHOPROMPT,\n", "label": "CODE"}, {"text": "                  \"nat-network-one-host\",\n                  VIR_NETWORK_UPDATE_COMMAND_DELETE,\n                  0);\n", "label": "CODE"}, {"text": "static int testIOThreadPin(const void *data G_GNUC_UNUSED)\n", "label": "CODE"}, {"text": "    return ret == 0 ? EXIT_SUCCESS : EXIT_FAILURE;\n}\nVIR_TEST_MAIN(mymain)\n", "label": "CODE"}, {"text": "#endif#include <config.h>\n#include \"internal.h\"\n", "label": "CODE"}, {"text": "    DO_TEST_DIFFERENT(\"disk-virtio\");\n    DO_TEST_DIFFERENT(\"grub-bootorder\");\n    DO_TEST_DIFFERENT(\"grub-bootorder2\");\n", "label": "CODE"}, {"text": "    \"sdba\", \"sdbb\", \"sdbc\", \"sdbd\", \"sdbe\", \"sdbf\", \"sdbg\", \"sdbh\", \"sdbi\", \"sdbj\", \"sdbk\", \"sdbl\", \"sdbm\", \"sdbn\", \"sdbo\", \"sdbp\", \"sdbq\", \"sdbr\", \"sdbs\", \"sdbt\", \"sdbu\", \"sdbv\", \"sdbw\", \"sdbx\", \"sdby\", \"sdbz\",\n", "label": "CODE"}, {"text": "            VIR_TEST_DEBUG(\"Expect param [%s]\", kEntries[i].param);\n", "label": "CODE"}, {"text": "    DO_TEST(\"pool-gluster-sub\");\n", "label": "CODE"}, {"text": "    DO_TEST_FULL(name, 0)\n# define DO_TEST_FAILURE(name) \\\n    DO_TEST_FULL(name, FLAG_EXPECT_FAILURE)\n# define DO_TEST_PARSE_ERROR(name) \\\n    DO_TEST_FULL(name, FLAG_EXPECT_PARSE_ERROR)\n# define DO_TEST_PREPARE_ERROR(name) \\\n", "label": "CODE"}, {"text": "               STRNEQ(usageID, \"client.admin secret\")) {\n", "label": "CODE"}, {"text": "#include \"internal.h\"\n", "label": "CODE"}, {"text": "    do { \\\n", "label": "CODE"}, {"text": "    return testCompareOutputLit(exp, NULL, argv);\n", "label": "CODE"}, {"text": "    DO_TEST_FAIL(\"pool-disk\");\n    DO_TEST_FAIL(\"pool-disk-device-nopartsep\");\n", "label": "CODE"}, {"text": "        return FALSE;\n", "label": "CODE"}, {"text": "            return -1;\n        } else {\n            VIR_TEST_DEBUG(\"As expected, failed to parse %s\", info->doc);\n", "label": "CODE"}, {"text": "*pos='\\0';", "label": "CODE"}, {"text": "    caps = virCapabilitiesNew(VIR_ARCH_I686, true, true);\n", "label": "CODE"}, {"text": "                   testIOThreadSet, NULL) != 0)\n        ret = -1;\n    if (virTestRun(\"virsh iothreadpin\",\n                   testIOThreadPin, NULL) != 0)\n        ret = -1;\n#include <config.h>\n#include \"testutils.h\"\n#ifdef WITH_VMX\n# include <unistd.h>\n# include \"internal.h\"\n# include \"vmx/vmx.h\"\n# define VIR_FROM_THIS VIR_FROM_VMWARE\nstatic virCaps *caps;\nstatic virDomainXMLOption *xmlopt;\nstatic virVMXContext ctx;\nstatic void\ntestCapsInit(void)\n{\n", "label": "CODE"}, {"text": "        return -1;\n", "label": "CODE"}, {"text": "        return EXIT_FAILURE;\n# define DO_TEST_FULL(name, is_different, active, parse_flags) \\\n    do { \\\n        const struct testInfo info = {name, is_different, active, \\\n                                      parse_flags}; \\\n        if (virTestRun(\"LXC XML-2-XML \" name, \\\n                       testCompareXMLToXMLHelper, &info) < 0) \\\n            ret = -1; \\\n    } while (0)\n# define DO_TEST(name) \\\n    DO_TEST_FULL(name, 0, true, 0)\n# define DO_TEST_DIFFERENT(name) \\\n    DO_TEST_FULL(name, 1, true, 0)\n#include <config.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <fcntl.h>\n#include \"internal.h\"\n", "label": "CODE"}, {"text": "    while (*cur != 0) {\n        if (*cur == '<') {\n            *out++ = '&';\n", "label": "CODE"}, {"text": "    {\"arg1 myarg=no arg2=val2 myarg=yes arg4=val4 myarg=no arg5\", \"myarg\",  {\"a\", \"b\"},          VIR_KERNEL_CMDLINE_FLAGS_SEARCH_FIRST | VIR_KERNEL_CMDLINE_FLAGS_CMP_PREFIX, false },\n", "label": "CODE"}]