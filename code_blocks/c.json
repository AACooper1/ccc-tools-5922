[{"text": "    while ((c = getopt(argc, argv, \":hpo:f:\")) > 0) {\n", "label": "CODE"}, {"text": "#include \"internal.h\"\n", "label": "CODE"}, {"text": "    *description; \\\n", "label": "CODE"}, {"text": "        ret = -1;\n", "label": "CODE"}, {"text": "bool_t\n", "label": "CODE"}, {"text": "#include \"testutils.h\"\n", "label": "CODE"}, {"text": "    char *get_filters = NULL;\n", "label": "CODE"}, {"text": "                       virGetLastErrorMessage());\n        virResetLastError();\n    }\n    return ret;\n}\nstatic int\nmymain(void)\n{\n    int ret = 0;\n    if ((driver.caps = virBhyveCapsBuild()) == NULL)\n        return EXIT_FAILURE;\n    if ((driver.xmlopt = virBhyveDriverCreateXMLConf(&driver)) == NULL)\n        return EXIT_FAILURE;\n", "label": "CODE"}, {"text": "#include <config.h>\n#include <unistd.h>\n", "label": "CODE"}, {"text": "      exit(0);\n    }\n", "label": "CODE"}, {"text": "#define DO_TEST(NAME, EXPECT_WARN) \\\n    do { \\\n", "label": "CODE"}, {"text": "          &name_length,0,&type,(BYTE *) wide_value,&value_length);\n        registry_index++;\n        if (res != ERROR_SUCCESS)\n          continue;\n        WideCharToMultiByte(CP_UTF8,0,wide_name,-1,utf8,sizeof(utf8),NULL,\n          NULL);\n        if ((pos=strstr(utf8,\" (TrueType)\")) == (char*) NULL)\n          continue;\n*pos='\\0';        type_info=(TypeInfo *) AcquireCriticalMemory(sizeof(*type_info));\n        (void) memset(type_info,0,sizeof(TypeInfo));\n", "label": "CODE"}, {"text": "      if (strstr(rout,\"gemm\") != 0)\n", "label": "CODE"}, {"text": "        virBufferAddLit(&buf, \"  \\\"/etc/glvnd/egl_vendor.d/{,*}\\\" r,\\n\");\n        virBufferAddLit(&buf, \"  \\\"/usr/share/glvnd/egl_vendor.d/{,*}\\\" r,\\n\");\n        virBufferAddLit(&buf, \"  \\\"/usr/share/egl/egl_external_platform.d/\\\" r,\\n\");\nvirBufferAddLit(&buf,        virBufferAddLit(&buf, \"  \\\"/proc/modules\\\" r,\\n\");\n", "label": "CODE"}, {"text": "static int testCompareListCustom(const void *data G_GNUC_UNUSED)\n", "label": "CODE"}, {"text": "      {\n         if      (info == 5 ) info =  4;\n         else if (info == 4 ) info =  5;\n      }\n      else if (strstr(rout,\"trmm\") != 0 || strstr(rout,\"trsm\") != 0)\n      {\n         if      (info == 7 ) info =  6;\n         else if (info == 6 ) info =  7;\n      }\n      else if (strstr(rout,\"gemv\") != 0)\n      {\n", "label": "CODE"}, {"text": "    virBufferAdjustIndent(&buf2, 4);\n    virBufferAddLit(&buf2, \"It is a period of civil war.\\n\");\n    virBufferAddLit(&buf2, \"Rebel spaceships, striking\\n\");\n", "label": "CODE"}, {"text": "                virDomainLockFailureTypeToString(action));\n", "label": "CODE"}, {"text": "    if (virTestRun(\"virsh nodeinfo (default)\",\n", "label": "CODE"}, {"text": "        return -1;\n", "label": "CODE"}, {"text": "    case VIR_DOMAIN_LOCK_FAILURE_PAUSE:\n", "label": "CODE"}, {"text": "    virObjectUnref(mgr);\n", "label": "CODE"}, {"text": "  MagickBooleanType\n", "label": "CODE"}, {"text": "mymain(void)\n{\n    int ret = 0;\n#define DO_TEST_FULL(name, cmd, doc, expect, pass) \\\n    do { \\\n        struct testInfo info = { name, doc, expect, pass }; \\\n        if (virTestRun(name, testJSON ## cmd, &info) < 0) \\\n            ret = -1; \\\n", "label": "CODE"}, {"text": "                       VIR_NETWORK_UPDATE_COMMAND_ADD_LAST,\n", "label": "CODE"}, {"text": "        ret = 0;\n        if (expectResult != TEST_COMPARE_NET_XML2XML_RESULT_SUCCESS) {\n", "label": "CODE"}, {"text": "            VIR_TEST_DEBUG(\"Actual next [%s]\", next);\n", "label": "CODE"}, {"text": "    DO_TEST_FAIL(\"bhyveload-name-mismatch\");\n    DO_TEST_FAIL(\"bhyverun-name-mismatch\");\n    DO_TEST_FAIL(\"bhyveload-mem-mismatch\");\n    DO_TEST_FAIL(\"bhyverun-mem-mismatch\");\n    DO_TEST_FAIL(\"bhyveload-mem-mismatch\");\n    DO_TEST_FAIL(\"bhyveload-memsize-fail\");\n    DO_TEST(\"bhyveload-bootorder\");\n    DO_TEST_FAIL(\"extraargs\");\n    DO_TEST(\"vnc\");\n    DO_TEST(\"vnc-listen\");\n    DO_TEST(\"vnc-vga-on\");\n    DO_TEST(\"vnc-vga-off\");\n    DO_TEST(\"vnc-vga-io\");\n    DO_TEST(\"vnc-resolution\");\n    DO_TEST(\"vnc-password\");\n    virObjectUnref(driver.caps);\n    virObjectUnref(driver.xmlopt);\n    return ret == 0 ? EXIT_SUCCESS : EXIT_FAILURE;\n}\nVIR_TEST_MAIN_PRELOAD(mymain, VIR_TEST_MOCK(\"bhyveargv2xml\"))\n", "label": "CODE"}, {"text": "        if (data->fail)\n            return 0;\n        return -1;\n    } else if (data->fail) {\n        VIR_TEST_DEBUG(\"Error expected but there wasn't any.\");\n        return -1;\n    }\n    schemata_str = virResctrlAllocFormat(alloc);\n    if (virTestCompareToFile(schemata_str, schemata_file) < 0)\n        return -1;\n    return 0;\n}\nstatic int\nmymain(void)\n{\n    struct virResctrlData data = {0};\n    int ret = 0;\n#define DO_TEST_UNUSED(_filename) \\\n    do { \\\n        data = (struct virResctrlData) { .filename = _filename }; \\\n", "label": "CODE"}, {"text": "    return str ? str : \"unknown\";\n", "label": "CODE"}, {"text": "    TEST_COMPARE_NET_XML2XML_RESULT_FAIL_COMPARE,\n", "label": "CODE"}, {"text": " IOThread ID   CPU Affinity\\n\\\n", "label": "CODE"}, {"text": "    do { \\\n        const struct testInfo info = {name, driver, expectResult}; \\\n        if (virTestRun(\"CH XML-2-XML \" name, \\\n                       testCompareXMLToXMLHelper, &info) < 0) \\\n        ret = -1; \\\n    } while (0)\n#define DO_TEST(name) \\\n    DO_TEST_FULL(name, TEST_COMPARE_DOM_XML2XML_RESULT_SUCCESS)\n#define DO_TEST_FAIL_PARSE(name) \\\n    DO_TEST_FULL(name, TEST_COMPARE_DOM_XML2XML_RESULT_FAIL_PARSE)\n", "label": "CODE"}, {"text": "    if (!(xmlLines = g_strsplit(xml, \"\\n\", 0))) {\n        VIR_FREE(xml);\n        return NULL;\n    }\n    VIR_FREE(xml);\n    for (xmlLine = xmlLines; *xmlLine; xmlLine++) {\n", "label": "CODE"}, {"text": "        disk = &def->disks[0];\n", "label": "CODE"}, {"text": "    DO_TEST_FAIL(\"insert-incomplete-host\",\n", "label": "CODE"}, {"text": "    const char *arg;\n", "label": "CODE"}, {"text": "    cmdline = g_strdup_printf(\"%s/storagepoolxml2argvdata/%s%s.argv\",\n", "label": "CODE"}, {"text": "    DO_TEST(\"ipt-no-macspoof-test\", false);\n    DO_TEST(\"icmp-direction-test\", false);\n    DO_TEST(\"icmp-direction2-test\", false);\n    DO_TEST(\"icmp-direction3-test\", false);\n    DO_TEST(\"conntrack-test\", false);\n    DO_TEST(\"hex-data-test-invalid\", true);\n    DO_TEST(\"comment-test-invalid\", true);\n    DO_TEST(\"example-1\", false);\n    DO_TEST(\"example-2\", false);\n#include <config.h>\n#include \"testutils.h\"\n", "label": "CODE"}, {"text": "    const char *str = NULL;\n", "label": "CODE"}, {"text": "}\n#include <stdio.h>\n", "label": "CODE"}, {"text": "        }\n        return -1;\n    }\n", "label": "CODE"}, {"text": "    g_autofree char *indata = NULL;\n    g_autofree char *outfile = NULL;\n    g_autofree char *actual = NULL;\n    infile = g_strdup_printf(\"%s/virjsondata/parse-%s-in.json\",\n                             abs_srcdir, info->name);\n    outfile = g_strdup_printf(\"%s/virjsondata/parse-%s-out.json\",\n                              abs_srcdir, info->name);\n", "label": "CODE"}, {"text": "    char *start;\n    char *end;\n    if (!(start = strstr(buffer, toRemove)))\n      return -1;\n    if (!(end = strstr(start+1, \"\\n\"))) {\n      *start = '\\0';\n    } else {\n      memmove(start, end, strlen(end)+1);\n    }\n    return 0;\n}\nstatic int\ntestCompareOutputLit(const char *expectData,\n", "label": "CODE"}, {"text": "#include <config.h>\n", "label": "CODE"}, {"text": "testJSONFromString(const void *data)\n", "label": "CODE"}, {"text": "    } else if ((flags & FLAG_EXPECT_FAILURE)) {\n        VIR_TEST_DEBUG(\"Did not get expected failure from \"\n", "label": "CODE"}, {"text": "#include \"configmake.h\"\n#define VIR_FROM_THIS VIR_FROM_QEMU\n#include <config.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <fcntl.h>\n", "label": "CODE"}, {"text": "struct testInfo {\n    bool shouldFail;\n    const char *pool;\n    const char *platformSuffix;\n};\n", "label": "CODE"}, {"text": "        goto cleanup;\n    }\n", "label": "CODE"}]