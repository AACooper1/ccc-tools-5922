[{"text": "    unsigned long screen_width, screen_height;\n", "label": "CODE"}, {"text": "}\nstd::string Magick::Image::comment(void) const\n", "label": "CODE"}, {"text": "    void test_metaprog()\n    {\n", "label": "CODE"}, {"text": "                return;\n            case '\\n':\n                type = END_OF_LINE;\n                token = \"\\n\";\n                return;\n            case '\\r':\n            case ' ':\n            case '\\t':\n                type = WHITE_SPACE;\n                token = static_cast<char>(ch);\n                ch = streambuf->sgetc();\n                while ((ch == ' ' || ch == '\\t' || ch == '\\r') && ch != EOF)\n", "label": "CODE"}, {"text": "            set_header(\"Content-Type\", \"application/x-www-form-urlencoded\");\n", "label": "CODE"}, {"text": "            }\n        }\n        static double gg3(double x)\n        {\n", "label": "CODE"}, {"text": "            temp_image = image();\n", "label": "CODE"}, {"text": "            ++count2;\n", "label": "CODE"}, {"text": "    {\n        read_image( check_file( filename ), NULL, 0L );\n", "label": "CODE"}, {"text": "            DLIB_TEST(  sum(round(1e10*(a - u*w*trans(v)))) == 0);\n            DLIB_TEST((round(1e10*trans(u)*u)  == 1e10*identity_matrix<double,N>()));\n            DLIB_TEST((round(1e10*trans(v)*v)  == 1e10*identity_matrix<double,N>()));\n        }\n        {\n", "label": "CODE"}, {"text": "            test_normal();\n            print_spinner();\n            test_normal_no_bias();\n            print_spinner();\n            test_sparse();\n            print_spinner();\n            test_normal_force_last_weight(false,false);\n            print_spinner();\n            test_normal_force_last_weight(false,true);\n            print_spinner();\n", "label": "CODE"}, {"text": "    using namespace test;\n", "label": "CODE"}, {"text": "    rect_type rect_up2 (\n", "label": "CODE"}, {"text": "                            return false;\n                    }\n                    return true;\n                };\n                matrix<double,0,1> lower(5), upper(5);\n                lower = 0;\n                lower(0) = -4;\n                upper = 4;\n                auto result = find_min_global(f, lower, upper, max_function_calls(40));\n                for (long i = 1; i < result.x.size(); ++i)\n                    result.x(i) += result.x(i-1);\n", "label": "CODE"}, {"text": "        test_find_k_nearest_neighbors_lsh<hash_similar_angles_128>(samples);\n", "label": "CODE"}, {"text": "                        window_table.get_mutex().unlock();\n                        if (disp == 0)\n                        {\n", "label": "CODE"}, {"text": "            py::arg(\"trainer\"),py::arg(\"x\"),py::arg(\"y\"),py::arg(\"folds\"));\n", "label": "CODE"}, {"text": "    class sparse_vector_tester : public tester\n", "label": "CODE"}, {"text": "            const int sbin,\n", "label": "CODE"}, {"text": "            b2.set_size(btn_size,style->get_width());\n", "label": "CODE"}, {"text": "            DLIB_TEST_MSG(rs.mean() < 10.0, rs.mean());\n", "label": "CODE"}, {"text": "    _hclpHuPhash(7)\n", "label": "CODE"}, {"text": "            const tensor_descriptor& dest_desc\n        )\n        {\n", "label": "CODE"}, {"text": "                        const float dx = *p_grad * p_gamma[k];\n                        p_dmeans[k] += -dx*p_invstds[k] + p_dvars[k] * -2*(*p_src - p_means[k])*invnum;\n                        ++p_grad;\n                        ++p_src;\n", "label": "CODE"}, {"text": "            {\n                dlog << LERROR << \"error during bsp_context: \" << e.what();\n                DLIB_TEST(false);\n            }\n        }\n", "label": "CODE"}, {"text": "long matrix_double__len__(matrix<double>& c)\n{\n    return c.nr();\n}\nvoid matrix_double_serialize(const matrix<double>& m, const std::string& file)\n{\n    serialize(file) << m;\n}\n", "label": "CODE"}, {"text": "            if (status == -1 && errno == EINTR)\n", "label": "CODE"}, {"text": "                a = in.get();\n            }\n            if (in.peek() >= '0' && in.peek() <= '9')\n            {\n", "label": "CODE"}, {"text": "                const auto e = std::exp(x);\n                const auto delta = 2*e + e*e + 2;\n                const auto omega = 4*(x + 1) + 4*e*e + e*e*e + e*(4*x + 6);\n                return e*omega/(delta*delta);\n            };\n            if (is_same_object(gradient_input, grad))\n            {\n", "label": "CODE"}, {"text": "            dlog << LINFO;\n", "label": "CODE"}, {"text": "        mutable int i;\n", "label": "CODE"}, {"text": "        DLIB_ASSERT ( current_element_valid() ,\n                \"\\tconst std::string& list_box::element()\"\n                 );\n", "label": "CODE"}, {"text": "Magick::embossImage::embossImage( void )\n  : _radius( 1 ),\n", "label": "CODE"}, {"text": "        cursor_visible = false;\n    }\n    void text_box::\n    adjust_total_rect (\n", "label": "CODE"}, {"text": "        CALL_WITH_N_ARGS(22)\n        CALL_WITH_N_ARGS(23)\n        CALL_WITH_N_ARGS(24)\n        CALL_WITH_N_ARGS(25)\n        CALL_WITH_N_ARGS(26)\n        CALL_WITH_N_ARGS(27)\n        CALL_WITH_N_ARGS(28)\n        CALL_WITH_N_ARGS(29)\n        CALL_WITH_N_ARGS(30)\n        CALL_WITH_N_ARGS(31)\n        CALL_WITH_N_ARGS(32)\n        CALL_WITH_N_ARGS(33)\n        CALL_WITH_N_ARGS(34)\n        CALL_WITH_N_ARGS(35)\n        default:\n            DLIB_CASSERT(false, \"oops\");\n            break;\n    }\n}\n", "label": "CODE"}, {"text": "            sout << \"bobOkgu1/3ExBOTiCjbcxgGrgXw7VdmFURpq+FAQwuNxLDSoNfwFw6ISgP80lgBDV8/5l24p517f\";\n            sout << \"fvNPTCus2I2A", "label": "CODE"}, {"text": "            {\n                unsigned char buf = static_cast<unsigned char>(low>>24);\n                high <<= 8;  \n                low <<= 8;               \n", "label": "CODE"}, {"text": "      isValid(true);\n", "label": "CODE"}, {"text": "                else\n", "label": "CODE"}, {"text": "  ThrowImageException;\n", "label": "CODE"}, {"text": "void Magick::Options::strokeLineCap(const LineCap lineCap_)\n", "label": "CODE"}, {"text": "    void on_open_file (const std::string& file)\n", "label": "CODE"}, {"text": "                swap(vals1, vals2);\n            const double err = equal_error_rate(vals1, vals2).first;\n            dlog << LINFO << \"LDA ERR: \" << err;\n            DLIB_TEST(err == 0);\n", "label": "CODE"}, {"text": "                src_p  += src_sample_size;\n            }\n", "label": "CODE"}, {"text": "        .def(\"__repr__\", &::print_simple_object_detector_training_options)\n        .def_readwrite(\"be_verbose\", &type::be_verbose,\n\"If true, train_simple_object_detector() will print out a lot of information to the screen while training.\")\n        .def_readwrite(\"add_left_right_image_flips\", &type::add_left_right_image_flips,\n", "label": "CODE"}, {"text": "            DLIB_TEST(blocks[i] == sout.str());\n            cr.block(\"all\").block(blocks[i]).get_blocks(temp_blocks);\n            DLIB_TEST(temp_blocks.size() == 0);\n", "label": "CODE"}, {"text": "                cerr << \"The --rm-other-labels option requires you to give one XML file on the command line.\" << endl;\n", "label": "CODE"}, {"text": "    bool entropy_decoder_kernel_2::\n", "label": "CODE"}, {"text": "  point+=buffer;\n  return(point);\n}\nbool Magick::Point::isValid(void) const\n{\n  return(_x > 0.0);\n}\n", "label": "CODE"}, {"text": "    static_assert(std::is_copy_constructible<dlib::optional<trivial_type>>::value, \"bad\");\n", "label": "CODE"}]