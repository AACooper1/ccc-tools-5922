[{"text": "        const std::string str2 = \"[7 [5 [3 The flight] [4 includes [3 a meal]]] [5 [3 The flight] [4 includes [3 a meal]]]]\";\n", "label": "CODE"}, {"text": "#if (MAGICKCORE_QUANTUM_DEPTH < 32) && (MAGICKCORE_SIZEOF_FLOAT_T != MAGICKCORE_SIZEOF_DOUBLE || !defined(MAGICKCORE_HDRI_SUPPORT))\n", "label": "CODE"}, {"text": "        DLIB_TEST(s.find_set(0) == 0);\n", "label": "CODE"}, {"text": "namespace  \n", "label": "CODE"}, {"text": "    const bigint_kernel_1 bigint_kernel_1::\n", "label": "CODE"}, {"text": "    numpy_image<rgb_pixel> temp;\n", "label": "CODE"}, {"text": "                    if (disp == 0)\n", "label": "CODE"}, {"text": "    operator == (\n", "label": "CODE"}, {"text": "        try {\n", "label": "CODE"}, {"text": "            const tensor& gradient_input, \n", "label": "CODE"}, {"text": "            GG (d, a, b, c, x[14], S22, 0xc33707d6); ", "label": "CODE"}, {"text": "        svr_test.set_c(10);\n", "label": "CODE"}, {"text": "            const float eps = 0.01;\n            return (f(+eps)-f(-eps))/(2*eps);\n        };\n", "label": "CODE"}, {"text": "            for (size_t i = 0; i < tmp.size(); ++i)\n", "label": "CODE"}, {"text": "            size_t begin,\n", "label": "CODE"}, {"text": "  return(static_cast<Magick::ColorspaceType>(_quantizeInfo->colorspace));\n}\n", "label": "CODE"}, {"text": "  return(constOptions()->density());\n", "label": "CODE"}, {"text": "            backward_filters_algo = backward_filters_best_algo;\n            config_to_algo_cache[cache_key] = std::make_tuple(forward_algo, backward_data_algo, backward_filters_algo);\n        }\n        void tensor_conv::\n        update_convolution_data_workspace_sizes(\n            const tensor& data,\n            const tensor_descriptor& dest_desc\n        )\n        {\n            CHECK_CUDNN(cudnnGetConvolutionForwardWorkspaceSize(\n                context(),\n", "label": "CODE"}, {"text": "        sin.clear();\n        sin.str(sout.str());\n        sout.str(\"\");\n        compressor.decompress(sin,sout);\n        return sout.str();\n    }\n    logger dlog(\"test.serialize\");\n    void serialize_test (\n    )\n#include <sstream>\n#include <string>\n#include <cstdlib>\n#include <ctime>\n#include <dlib/set.h>\n#include \"tester.h\"\nnamespace  \n{\n    using namespace test;\n    using namespace std;\n    using namespace dlib;\n    logger dlog(\"test.set\");\n    template <\n        typename set\n        >\n    void set_compare_test (\n    )\n#include \"tester.h\"\n", "label": "CODE"}, {"text": "        scalar_type eps;\n", "label": "CODE"}, {"text": "        for (auto&& d : dets) {\n", "label": "CODE"}, {"text": "        if (num != scrollable_region::next_free_user_event_number())\n", "label": "CODE"}, {"text": "Magick::ErrorBlob::~ErrorBlob() throw()\n{\n}\nMagick::ErrorCache::ErrorCache(const std::string& what_)\n", "label": "CODE"}, {"text": "            }\n            dlib::image_dataset_metadata::dataset data;\n            load_image_dataset_metadata(data, parser[0]);\n            const auto label = parser.option(\"rm-if-overlaps\").argument();\n            test_box_overlap overlaps(0.5);\n", "label": "CODE"}, {"text": "            auto& faces = batch_faces[i];\n            auto& img = batch_imgs[i];\n            std::vector<chip_details> dets;\n", "label": "CODE"}]