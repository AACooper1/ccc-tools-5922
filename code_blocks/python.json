[{"text": "    path(\n        \"simple/i18n.xml\",\n        views.sitemap,\n        {\"sitemaps\": simple_i18n_sitemaps},\n        name=\"django.contrib.sitemaps.views.sitemap\",\n    ),\n    path(\n", "label": "CODE"}, {"text": "            archives.extract7z(self.fullPath, tmp_extract)\n            for srcCRC, realCRC in zip(srcCRCs, realCRCs):\n                srcInstaller = crc_installer[srcCRC]\n                files = bolt.sortFiles(\n                    [x[0] for x in srcInstaller.fileSizeCrcs])\n                if not files: continue\n                progress(0, f'{srcInstaller}\\n' + _(u'Extracting files...'))\n                tempCRC = srcInstaller.crc\n                srcInstaller.crc = realCRC\n                self._unpack(srcInstaller, files, tmp_extract,\n                    progress=SubProgress(progress, lastStep, nextStep))\n                srcInstaller.crc = tempCRC\n                lastStep = nextStep\n                nextStep += step\n            self._arrangeFiles(tmp_extract, tmp_dest,\n                progress=SubProgress(progress, lastStep, 0.7))\n            archives.compress7z(installers_dir.join(destArchive),\n                GPath_no_norm(tmp_dest), SubProgress(progress, 0.7, 1.0),\n                is_solid=self.isSolid, blockSize=self.blockSize)\n    def applySettings(self, destInstaller):\n        Needs two temporary directories as arguments: a source directory\n        containing the files to be arranged and a destination directory where\nthe        progress(0, _(u'Moving files...'))\n        progress.setFull(1 + len(self.convertedFiles))\n        dupes = self.dupeCount.copy()\n        tempJoin = GPath_no_norm(src_temp).join\n        destJoin = GPath_no_norm(dst_temp).join\n        for index, (crcValue, srcDir_File, destFile) in enumerate(\n                self.convertedFiles):\n            srcDir, srcFile = srcDir_File\n            srcDir = f'{srcDir:08X}' if isinstance(srcDir, int) else srcDir\n            src_rel = os.path.join(srcDir, srcFile)\n            src_full = tempJoin(src_rel)\n            if not src_full.exists():\n                raise StateError(_('%(bcf_rel)s: Missing source file:') % {\n                    'bcf_rel': self.fullPath.stail} + f'\\n{src_rel}')\n            if destFile is None:\n                raise StateError(_('%(bcf_rel)s: Unable to determine file '\n                                   'destination for:') % {\n                    'bcf_rel': self.fullPath.stail} + f'\\n{src_rel}')\n", "label": "CODE"}, {"text": "        count = (\n            DiscoverRunner(verbosity=0)\n", "label": "CODE"}, {"text": "            out.write(b'Name: ')\n            out.write(encode(filename[:-5]))\n            out.write(b'\\nAuthor: ')\n            out.write(encode(self.omod_author))\n            out.write(b'\\nVersion:')             out.write(b'\\nContact: ')\n            out.write(encode(self.email))\n            out.write(b'\\nWebsite: ')\n            out.write(encode(self.website))\n            out.write(b'\\n\\n')\n", "label": "CODE"}, {"text": "    (3) Select the first (essentially an arbitrary) element from any character\n", "label": "CODE"}, {"text": "        X.Y.Z[tag[tagrevision]]\n", "label": "CODE"}, {"text": "                HStoreModel(field={}),\n", "label": "CODE"}, {"text": "            raise Exception(\"setUpClass() should have raised an exception.\")\n", "label": "CODE"}, {"text": "      files.extend(action.get('inputs', []))\n", "label": "CODE"}, {"text": "        for delete_link in self.selenium.find_elements(\n", "label": "CODE"}, {"text": "        encoded = make_password(\"l\u00e8tmein\")\n        state = {\"upgraded\": False}\n        def setter():\n", "label": "CODE"}, {"text": "            )\n            data[:] = []\n", "label": "CODE"}, {"text": "    def test_polygon_comparison(self):\n        p1 = Polygon(((0, 0), (0, 1), (1, 1), (1, 0), (0, 0)))\n        p2 = Polygon(((0, 0), (0, 1), (1, 0), (0, 0)))\n        self.assertGreater(p1, p2)\n", "label": "CODE"}, {"text": "        from django.utils.translation import trans_real\n", "label": "CODE"}, {"text": "    @skipUnlessDBFeature(\"has_AsWKB_function\")\n", "label": "CODE"}, {"text": "        self.check_dimensions(p, 4, 8, \"mugshot\")\n", "label": "CODE"}, {"text": "    def visible(self, is_visible: bool):\n", "label": "CODE"}, {"text": "    app.config.from_mapping([(\"SECRET_KEY\", \"config\"), (\"TEST_KEY\", \"foo\")])\n", "label": "CODE"}, {"text": "        self.file.seek(0)\n", "label": "CODE"}, {"text": "names.clear() ", "label": "CODE"}, {"text": "                '\"t3\".\"timestamp\", \"t4\".\"id\", \"t4\".\"username\" '\n", "label": "CODE"}, {"text": "        else:\n", "label": "CODE"}, {"text": "    def __init__(self, dir, params):\n", "label": "CODE"}, {"text": "    uuid = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n", "label": "CODE"}, {"text": "            self.b1.authors(manager=\"fun_people\").all(),\n", "label": "CODE"}]