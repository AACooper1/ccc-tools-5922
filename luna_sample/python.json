[{"text": " Needed for @total_ordering\n", "label": "NONCODE"}, {"text": " Assume business logic forces every person to have at least one house.\n", "label": "NONCODE"}, {"text": " Filter with band index transform.\n", "label": "NONCODE"}, {"text": " Return the hashed version to the file\n", "label": "NONCODE"}, {"text": " Test models appearing twice, and models appearing consecutively\n", "label": "NONCODE"}, {"text": " SQLite 3.8.9+ has 5 columns, however older versions only give 3\n columns. Discard last 2 columns if there.\n", "label": "NONCODE"}, {"text": " ..to apply each replacement pattern to the content\n", "label": "NONCODE"}, {"text": " Filters must never raise exceptionsm, so catch everything.\n", "label": "NONCODE"}, {"text": " If uninitialized, copy the wrapper. Use type(self), not\n self.__class__, because the latter is proxied.\n", "label": "NONCODE"}, {"text": " If a converter isn't specified, the default is `str`.\n", "label": "NONCODE"}, {"text": " GeoLite City database detected.\n", "label": "NONCODE"}, {"text": " Check if auto-generated name for the field is too long\n for the database.\n", "label": "NONCODE"}, {"text": " Fields with db_column = field name.\n", "label": "NONCODE"}, {"text": " sync iterator. Consume via sync_to_async and yield via async\n generator.\n", "label": "NONCODE"}, {"text": " To keep rendering order consistent, we can't just iterate over items().\n We need to sort the keys, and iterate over the sorted list.\n", "label": "NONCODE"}, {"text": " Check call to update_or_create() succeeded and the subsequent\n (blocked) call to update().\n", "label": "NONCODE"}, {"text": " Generating the field name for each field in the layer.\n", "label": "NONCODE"}, {"text": " Match found, reset index.\n", "label": "NONCODE"}, {"text": " SpatiaLite collapse to POINT.\n", "label": "NONCODE"}, {"text": " Reassigning the Restaurant object results in an immediate cache update\n We can't use a new Restaurant because that'll violate one-to-one, but\n with a new *instance* the is test below will fail if #6886 regresses.\n", "label": "NONCODE"}, {"text": " Arguments to reversed() must be reversible.\n", "label": "NONCODE"}, {"text": " rebaking doesn't change the rendered content\n", "label": "NONCODE"}, {"text": " Categories.\n", "label": "NONCODE"}, {"text": " Ignore any private attributes that Django doesn't care about.\n NOTE: We can't modify a dictionary's contents while looping\n over it, so we loop over the *original* dictionary instead.\n", "label": "NONCODE"}, {"text": " Is it currently being sorted on?\n", "label": "NONCODE"}, {"text": " field is a models.DateField\n", "label": "NONCODE"}, {"text": " The second page of results.\n", "label": "NONCODE"}, {"text": " DateTimeField rendered as_hidden() is special too\n", "label": "NONCODE"}, {"text": " Defer fields with only()\n", "label": "NONCODE"}, {"text": " If connection.operators is looked up before a connection has been\n created, transparently initialize connection.operators to avert an\n AttributeError.\n", "label": "NONCODE"}, {"text": " field is likely a ForeignObjectRel\n", "label": "NONCODE"}, {"text": " Disable auto-created table of contents entries for all domain objects (e.g.\n functions, classes, attributes, etc.) in Sphinx 5.2+.\n", "label": "NONCODE"}, {"text": " The related fetches are done in batches.\n", "label": "NONCODE"}, {"text": " Explicitly testing for the empty set, since we now always have sets.\n During removal (('col1', 'col2'),) --> () this becomes set([])\n", "label": "NONCODE"}, {"text": "\n flatatt #\n\n", "label": "NONCODE"}, {"text": " Expand the lazy instance, as it can cause issues when it is passed\n further to some Python functions like urlparse.\n", "label": "NONCODE"}, {"text": " But b__f1 does.\n", "label": "NONCODE"}, {"text": " Alter to set db_index=True and remove unique=True (should restore index)\n", "label": "NONCODE"}, {"text": " dot-atom\n", "label": "NONCODE"}, {"text": " This is a bug.\n", "label": "NONCODE"}, {"text": " on_each_side=0, on_ends=0\n", "label": "NONCODE"}, {"text": " Just the one form for existing instances\n", "label": "NONCODE"}, {"text": " Enclosure.\n", "label": "NONCODE"}, {"text": " Creating a LinearRing from a tuple, list, and numpy array\n", "label": "NONCODE"}, {"text": " The parsed result does a round trip to default format\n", "label": "NONCODE"}, {"text": " And test reversal\n", "label": "NONCODE"}, {"text": " Some models with a cycle in the default ordering. This would be bad if we\n didn't catch the infinite loop.\n", "label": "NONCODE"}, {"text": " the child->parent link\n", "label": "NONCODE"}, {"text": " A custom app registry to use, if you're making a separate model set.\n", "label": "NONCODE"}, {"text": " deleting the rock should delete the related tag.\n", "label": "NONCODE"}]