[{"text": "    while ((c = getopt(argc, argv, \":hpo:f:\")) > 0) {\n", "label": "CODE"}, {"text": "#include \"internal.h\"\n", "label": "CODE"}, {"text": "    *description; \\\n", "label": "CODE"}, {"text": "        ret = -1;\n", "label": "CODE"}, {"text": "bool_t\n", "label": "CODE"}, {"text": "#include \"testutils.h\"\n", "label": "CODE"}, {"text": "    char *get_filters = NULL;\n", "label": "CODE"}, {"text": "                       virGetLastErrorMessage());\n        virResetLastError();\n    }\n    return ret;\n}\nstatic int\nmymain(void)\n{\n    int ret = 0;\n    if ((driver.caps = virBhyveCapsBuild()) == NULL)\n        return EXIT_FAILURE;\n    if ((driver.xmlopt = virBhyveDriverCreateXMLConf(&driver)) == NULL)\n        return EXIT_FAILURE;\n", "label": "CODE"}, {"text": "#include <config.h>\n#include <unistd.h>\n", "label": "CODE"}, {"text": "      exit(0);\n    }\n", "label": "CODE"}, {"text": "#define DO_TEST(NAME, EXPECT_WARN) \\\n    do { \\\n", "label": "CODE"}, {"text": "          &name_length,0,&type,(BYTE *) wide_value,&value_length);\n        registry_index++;\n        if (res != ERROR_SUCCESS)\n          continue;\n        WideCharToMultiByte(CP_UTF8,0,wide_name,-1,utf8,sizeof(utf8),NULL,\n          NULL);\n        if ((pos=strstr(utf8,\" (TrueType)\")) == (char*) NULL)\n          continue;\n*pos='\\0';        type_info=(TypeInfo *) AcquireCriticalMemory(sizeof(*type_info));\n        (void) memset(type_info,0,sizeof(TypeInfo));\n", "label": "CODE"}, {"text": "      if (strstr(rout,\"gemm\") != 0)\n", "label": "CODE"}, {"text": "        virBufferAddLit(&buf, \"  \\\"/etc/glvnd/egl_vendor.d/{,*}\\\" r,\\n\");\n        virBufferAddLit(&buf, \"  \\\"/usr/share/glvnd/egl_vendor.d/{,*}\\\" r,\\n\");\n        virBufferAddLit(&buf, \"  \\\"/usr/share/egl/egl_external_platform.d/\\\" r,\\n\");\nvirBufferAddLit(&buf,        virBufferAddLit(&buf, \"  \\\"/proc/modules\\\" r,\\n\");\n", "label": "CODE"}, {"text": "static int testCompareListCustom(const void *data G_GNUC_UNUSED)\n", "label": "CODE"}, {"text": "      {\n         if      (info == 5 ) info =  4;\n         else if (info == 4 ) info =  5;\n      }\n      else if (strstr(rout,\"trmm\") != 0 || strstr(rout,\"trsm\") != 0)\n      {\n         if      (info == 7 ) info =  6;\n         else if (info == 6 ) info =  7;\n      }\n      else if (strstr(rout,\"gemv\") != 0)\n      {\n", "label": "CODE"}, {"text": "    virBufferAdjustIndent(&buf2, 4);\n    virBufferAddLit(&buf2, \"It is a period of civil war.\\n\");\n    virBufferAddLit(&buf2, \"Rebel spaceships, striking\\n\");\n", "label": "CODE"}, {"text": "                virDomainLockFailureTypeToString(action));\n", "label": "CODE"}, {"text": "    if (virTestRun(\"virsh nodeinfo (default)\",\n", "label": "CODE"}, {"text": "        return -1;\n", "label": "CODE"}, {"text": "    case VIR_DOMAIN_LOCK_FAILURE_PAUSE:\n", "label": "CODE"}, {"text": "    virObjectUnref(mgr);\n", "label": "CODE"}, {"text": "  MagickBooleanType\n", "label": "CODE"}, {"text": "mymain(void)\n{\n    int ret = 0;\n#define DO_TEST_FULL(name, cmd, doc, expect, pass) \\\n    do { \\\n        struct testInfo info = { name, doc, expect, pass }; \\\n        if (virTestRun(name, testJSON ## cmd, &info) < 0) \\\n            ret = -1; \\\n", "label": "CODE"}, {"text": "                       VIR_NETWORK_UPDATE_COMMAND_ADD_LAST,\n", "label": "CODE"}, {"text": "        ret = 0;\n        if (expectResult != TEST_COMPARE_NET_XML2XML_RESULT_SUCCESS) {\n", "label": "CODE"}, {"text": "            VIR_TEST_DEBUG(\"Actual next [%s]\", next);\n", "label": "CODE"}, {"text": "    DO_TEST_FAIL(\"bhyveload-name-mismatch\");\n    DO_TEST_FAIL(\"bhyverun-name-mismatch\");\n    DO_TEST_FAIL(\"bhyveload-mem-mismatch\");\n    DO_TEST_FAIL(\"bhyverun-mem-mismatch\");\n    DO_TEST_FAIL(\"bhyveload-mem-mismatch\");\n    DO_TEST_FAIL(\"bhyveload-memsize-fail\");\n    DO_TEST(\"bhyveload-bootorder\");\n    DO_TEST_FAIL(\"extraargs\");\n    DO_TEST(\"vnc\");\n    DO_TEST(\"vnc-listen\");\n    DO_TEST(\"vnc-vga-on\");\n    DO_TEST(\"vnc-vga-off\");\n    DO_TEST(\"vnc-vga-io\");\n    DO_TEST(\"vnc-resolution\");\n    DO_TEST(\"vnc-password\");\n    virObjectUnref(driver.caps);\n    virObjectUnref(driver.xmlopt);\n    return ret == 0 ? EXIT_SUCCESS : EXIT_FAILURE;\n}\nVIR_TEST_MAIN_PRELOAD(mymain, VIR_TEST_MOCK(\"bhyveargv2xml\"))\n", "label": "CODE"}, {"text": "        if (data->fail)\n            return 0;\n        return -1;\n    } else if (data->fail) {\n        VIR_TEST_DEBUG(\"Error expected but there wasn't any.\");\n        return -1;\n    }\n    schemata_str = virResctrlAllocFormat(alloc);\n    if (virTestCompareToFile(schemata_str, schemata_file) < 0)\n        return -1;\n    return 0;\n}\nstatic int\nmymain(void)\n{\n    struct virResctrlData data = {0};\n    int ret = 0;\n#define DO_TEST_UNUSED(_filename) \\\n    do { \\\n        data = (struct virResctrlData) { .filename = _filename }; \\\n", "label": "CODE"}, {"text": "    return str ? str : \"unknown\";\n", "label": "CODE"}, {"text": "    TEST_COMPARE_NET_XML2XML_RESULT_FAIL_COMPARE,\n", "label": "CODE"}, {"text": " IOThread ID   CPU Affinity\\n\\\n", "label": "CODE"}, {"text": "    do { \\\n        const struct testInfo info = {name, driver, expectResult}; \\\n        if (virTestRun(\"CH XML-2-XML \" name, \\\n                       testCompareXMLToXMLHelper, &info) < 0) \\\n        ret = -1; \\\n    } while (0)\n#define DO_TEST(name) \\\n    DO_TEST_FULL(name, TEST_COMPARE_DOM_XML2XML_RESULT_SUCCESS)\n#define DO_TEST_FAIL_PARSE(name) \\\n    DO_TEST_FULL(name, TEST_COMPARE_DOM_XML2XML_RESULT_FAIL_PARSE)\n", "label": "CODE"}, {"text": "    if (!(xmlLines = g_strsplit(xml, \"\\n\", 0))) {\n        VIR_FREE(xml);\n        return NULL;\n    }\n    VIR_FREE(xml);\n    for (xmlLine = xmlLines; *xmlLine; xmlLine++) {\n", "label": "CODE"}, {"text": "        disk = &def->disks[0];\n", "label": "CODE"}, {"text": "    DO_TEST_FAIL(\"insert-incomplete-host\",\n", "label": "CODE"}, {"text": "    const char *arg;\n", "label": "CODE"}, {"text": "    cmdline = g_strdup_printf(\"%s/storagepoolxml2argvdata/%s%s.argv\",\n", "label": "CODE"}, {"text": "    DO_TEST(\"ipt-no-macspoof-test\", false);\n    DO_TEST(\"icmp-direction-test\", false);\n    DO_TEST(\"icmp-direction2-test\", false);\n    DO_TEST(\"icmp-direction3-test\", false);\n    DO_TEST(\"conntrack-test\", false);\n    DO_TEST(\"hex-data-test-invalid\", true);\n    DO_TEST(\"comment-test-invalid\", true);\n    DO_TEST(\"example-1\", false);\n    DO_TEST(\"example-2\", false);\n#include <config.h>\n#include \"testutils.h\"\n", "label": "CODE"}, {"text": "    const char *str = NULL;\n", "label": "CODE"}, {"text": "}\n#include <stdio.h>\n", "label": "CODE"}, {"text": "        }\n        return -1;\n    }\n", "label": "CODE"}, {"text": "    g_autofree char *indata = NULL;\n    g_autofree char *outfile = NULL;\n    g_autofree char *actual = NULL;\n    infile = g_strdup_printf(\"%s/virjsondata/parse-%s-in.json\",\n                             abs_srcdir, info->name);\n    outfile = g_strdup_printf(\"%s/virjsondata/parse-%s-out.json\",\n                              abs_srcdir, info->name);\n", "label": "CODE"}, {"text": "    char *start;\n    char *end;\n    if (!(start = strstr(buffer, toRemove)))\n      return -1;\n    if (!(end = strstr(start+1, \"\\n\"))) {\n      *start = '\\0';\n    } else {\n      memmove(start, end, strlen(end)+1);\n    }\n    return 0;\n}\nstatic int\ntestCompareOutputLit(const char *expectData,\n", "label": "CODE"}, {"text": "#include <config.h>\n", "label": "CODE"}, {"text": "testJSONFromString(const void *data)\n", "label": "CODE"}, {"text": "    } else if ((flags & FLAG_EXPECT_FAILURE)) {\n        VIR_TEST_DEBUG(\"Did not get expected failure from \"\n", "label": "CODE"}, {"text": "#include \"configmake.h\"\n#define VIR_FROM_THIS VIR_FROM_QEMU\n#include <config.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <fcntl.h>\n", "label": "CODE"}, {"text": "struct testInfo {\n    bool shouldFail;\n    const char *pool;\n    const char *platformSuffix;\n};\n", "label": "CODE"}, {"text": "        goto cleanup;\n    }\n", "label": "CODE"}, {"text": " Common decls for cjpeg/djpeg applications \n", "label": "NONCODE"}, {"text": "!\n            Removes a certain header\n        !\n", "label": "NONCODE"}, {"text": " ---------------------------------------------------------------------------------------- \n", "label": "NONCODE"}, {"text": " PCI30 6.2.1 \n Header type \n", "label": "NONCODE"}, {"text": " Security manager labeled all devices, therefore\n     * if any operation from now on fails, we need to ask the caller to\n     * restore labels.\n     \n", "label": "NONCODE"}, {"text": " Stores the complete backup metadata \n", "label": "NONCODE"}, {"text": " Start Of Image (beginning of datastream) \n End Of Image (end of datastream) \n Start Of Scan (begins compressed data) \n COMment \n", "label": "NONCODE"}, {"text": " Required for the definition of FILE: \n", "label": "NONCODE"}, {"text": " ignore -- will request binary anyway \n", "label": "NONCODE"}, {"text": " common constants \n", "label": "NONCODE"}, {"text": " USB2 controllers are the only exception to the simple\n             * \"assign the lowest unused index\". A group of USB2\n             * \"companions\" should all be at the same index as other\n             * USB2 controllers in the group, but only do this\n             * automatically if it appears to be the intent. To prove\n             * intent: the USB controller on the list just prior to\n             * this one must also be a USB2 controller, and there must\n             * not yet be a controller with the exact same model of\n             * this one and the same index as the previously added\n             * controller (e.g., if this controller is a UHCI1, then\n             * the previous controller must be an EHCI1 or a UHCI[23],\n             * and there must not already be a UHCI1 controller with\n             * the same index as the previous controller). If all of\n             * these are satisfied, set this controller to the same\n             * index as the previous controller.\n             \n", "label": "NONCODE"}, {"text": " make sure requires clause is not broken\n", "label": "NONCODE"}, {"text": "!\n            ensures\n                - returns point(right(), bottom()) \n                  (i.e. returns the bottom right corner point for this rectangle)\n        !\n", "label": "NONCODE"}, {"text": " ----------------------------------------------------------------------------------------\n", "label": "NONCODE"}, {"text": " Runs in any thread context \n", "label": "NONCODE"}, {"text": "\n * virDomainMemoryStatStruct:\n \n * Since: 0.7.5\n \n", "label": "NONCODE"}, {"text": "\n * virDomainEventPMSuspendedDetailType:\n \n * Details on the cause of a 'pmsuspended' lifecycle event\n \n * Since: 0.10.2\n \n", "label": "NONCODE"}, {"text": " * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * \n * Exported API functions\n \n", "label": "NONCODE"}, {"text": "\n *addHardDisksToMediaRegistry: Add a vboxSnapshotXmlHardDiskPtr to the registry as a\n *child of the disk whose uuid is 'parentHardDiskId'.\n *return 0 on success\n *return -1 on failure\n \n", "label": "NONCODE"}, {"text": "!\n            ensures\n                - #get_seed() == seed\n        !\n", "label": "NONCODE"}, {"text": " ranges for NAT \n", "label": "NONCODE"}, {"text": " Else lost a leading zero, so 'exp_b10' is\n                               * still ok at (-1)\n                               \n", "label": "NONCODE"}, {"text": " Copyright (C) 2008  Davis E. King (davis@dlib.net)\n License: Boost Software License   See LICENSE.txt for the full license.\n", "label": "NONCODE"}, {"text": " try the list with flags support (0.10.2 and later) \n", "label": "NONCODE"}, {"text": "!\n                requires\n                    - t != 0  (i.e. there must be something in the tree to remove)\n                ensures\n                    - the least node in t has been removed \n                    - the least node element in t has been put into #item \n                    - #t is still a binary search tree \n                    - returns false if the height of the tree has not changed \n                    - returns true if the height of the tree has shrunk by one\n            !\n", "label": "NONCODE"}, {"text": " Read the colormap from a Targa file \n", "label": "NONCODE"}, {"text": " This object you are trying to call matrix(length) on is not a column or \n row vector.\n", "label": "NONCODE"}, {"text": " If we've run out of data, just leave the MCU set to zeroes.\n   * This way, we return uniform gray for the remainder of the segment.\n   \n", "label": "NONCODE"}, {"text": " 'ramfb' property must be omitted unless it's to be enabled \n", "label": "NONCODE"}, {"text": " Start of struct IGuestDebugControl declaration \n", "label": "NONCODE"}, {"text": "\n * Copyright (C) 2011, 2014 Red Hat, Inc.\n \n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n \n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n \n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.  If not, see\n * <http://www.gnu.org/licenses/>.\n \n", "label": "NONCODE"}, {"text": " 1 ms \n", "label": "NONCODE"}, {"text": " If this was built on a system with LOCAL_PEERPID defined but\n         * the kernel doesn't support it we'll get back EOPNOTSUPP so\n         * treat all errors but EOPNOTSUPP as fatal\n         \n", "label": "NONCODE"}, {"text": " The location of the dot\n", "label": "NONCODE"}, {"text": "!\n            ensures\n                - moves item into *this.\n                - The exact move semantics are determined by which Storage type is used.  E.g. \n                  storage_heap will result in #item.is_empty()==true but storage_view would result\n                  in #item.is_empty() == false\n        !\n", "label": "NONCODE"}, {"text": "!A is_color_space_cartesian_image\n        A type traits class telling you if a type is an image holding some type of cartesian pixel type.\n\n        E.g. as contrasted with polar coordinates pixel types.\n    !\n", "label": "NONCODE"}, {"text": " insert the bias \n", "label": "NONCODE"}, {"text": " since there is currently one default pool now\n     * and virStorageVolDefFormat() just checks it type\n     * so just assign it for now, change the behaviour\n     * when vbox supports pools.\n     \n", "label": "NONCODE"}, {"text": " The error handling and memory handling information is left intact at this\n    * point: the jmp_buf may still have to be freed.  See png_destroy_png_struct\n    * for how this happens.\n    \n", "label": "NONCODE"}, {"text": "!\n            ensures\n                - returns the feature extractor used by this object\n        !\n", "label": "NONCODE"}, {"text": "\n * virDomainCheckpointXMLFlags:\n \n * Since: 5.6.0\n \n", "label": "NONCODE"}, {"text": "!\n        requires\n            - image_scanner should be either scan_image_pyramid or scan_image_boxes and\n              should use the hashed_feature_image as its local feature extractor.\n        ensures\n            - #scanner.get_feature_extractor().uses_uniform_feature_weights() == true\n              (i.e. Make the scanner's feature extractor use the uniform feature weighting\n              scheme)\n    !\n", "label": "NONCODE"}, {"text": " destroy objects by calling their destructor\n", "label": "NONCODE"}, {"text": " In this case, we need to send back the number of parameters\n     * supported\n     \n", "label": "NONCODE"}, {"text": " c2-c6 \n c6+c10 \n c10 \n c2 \n", "label": "NONCODE"}, {"text": " plug hole left by removing this node and free memory\n plug hole with left subtree\n", "label": "NONCODE"}, {"text": " VBOX_WITH_GLUE \n", "label": "NONCODE"}, {"text": " We now can reinterpret_cast between py::ssize_t and Py_intptr_t (MSVC + PyPy cares)\n", "label": "NONCODE"}, {"text": " open session \n", "label": "NONCODE"}, {"text": "\n     * NB, -nographic *MUST* come before any serial, or monitor\n     * or parallel port flags due to QEMU craziness, where it\n     * decides to change the serial port & monitor to be on stdout\n     * if you ask for nographic. So we have to make sure we override\n     * these defaults ourselves...\n     \n", "label": "NONCODE"}]