[{"text": "# include \"esx/esx_vi_types.h\"\nstruct testPath {\n    const char *datastorePath;\n    int result;\n    const char *datastoreName;\n    const char *directoryName;\n    const char *directoryAndFileName;\n};\nstatic struct testPath paths[] = {\n    { \"[datastore] directory/file\", 0, \"datastore\", \"directory\",\n", "label": "CODE"}, {"text": "        VIR_CRED_ECHOPROMPT,\n", "label": "CODE"}, {"text": "                  \"nat-network-one-host\",\n                  VIR_NETWORK_UPDATE_COMMAND_DELETE,\n                  0);\n", "label": "CODE"}, {"text": "static int testIOThreadPin(const void *data G_GNUC_UNUSED)\n", "label": "CODE"}, {"text": "    return ret == 0 ? EXIT_SUCCESS : EXIT_FAILURE;\n}\nVIR_TEST_MAIN(mymain)\n", "label": "CODE"}, {"text": "#endif#include <config.h>\n#include \"internal.h\"\n", "label": "CODE"}, {"text": "    DO_TEST_DIFFERENT(\"disk-virtio\");\n    DO_TEST_DIFFERENT(\"grub-bootorder\");\n    DO_TEST_DIFFERENT(\"grub-bootorder2\");\n", "label": "CODE"}, {"text": "    \"sdba\", \"sdbb\", \"sdbc\", \"sdbd\", \"sdbe\", \"sdbf\", \"sdbg\", \"sdbh\", \"sdbi\", \"sdbj\", \"sdbk\", \"sdbl\", \"sdbm\", \"sdbn\", \"sdbo\", \"sdbp\", \"sdbq\", \"sdbr\", \"sdbs\", \"sdbt\", \"sdbu\", \"sdbv\", \"sdbw\", \"sdbx\", \"sdby\", \"sdbz\",\n", "label": "CODE"}, {"text": "            VIR_TEST_DEBUG(\"Expect param [%s]\", kEntries[i].param);\n", "label": "CODE"}, {"text": "    DO_TEST(\"pool-gluster-sub\");\n", "label": "CODE"}, {"text": "    DO_TEST_FULL(name, 0)\n# define DO_TEST_FAILURE(name) \\\n    DO_TEST_FULL(name, FLAG_EXPECT_FAILURE)\n# define DO_TEST_PARSE_ERROR(name) \\\n    DO_TEST_FULL(name, FLAG_EXPECT_PARSE_ERROR)\n# define DO_TEST_PREPARE_ERROR(name) \\\n", "label": "CODE"}, {"text": "               STRNEQ(usageID, \"client.admin secret\")) {\n", "label": "CODE"}, {"text": "#include \"internal.h\"\n", "label": "CODE"}, {"text": "    do { \\\n", "label": "CODE"}, {"text": "    return testCompareOutputLit(exp, NULL, argv);\n", "label": "CODE"}, {"text": "    DO_TEST_FAIL(\"pool-disk\");\n    DO_TEST_FAIL(\"pool-disk-device-nopartsep\");\n", "label": "CODE"}, {"text": "        return FALSE;\n", "label": "CODE"}, {"text": "            return -1;\n        } else {\n            VIR_TEST_DEBUG(\"As expected, failed to parse %s\", info->doc);\n", "label": "CODE"}, {"text": "*pos='\\0';", "label": "CODE"}, {"text": "    caps = virCapabilitiesNew(VIR_ARCH_I686, true, true);\n", "label": "CODE"}, {"text": "                   testIOThreadSet, NULL) != 0)\n        ret = -1;\n    if (virTestRun(\"virsh iothreadpin\",\n                   testIOThreadPin, NULL) != 0)\n        ret = -1;\n#include <config.h>\n#include \"testutils.h\"\n#ifdef WITH_VMX\n# include <unistd.h>\n# include \"internal.h\"\n# include \"vmx/vmx.h\"\n# define VIR_FROM_THIS VIR_FROM_VMWARE\nstatic virCaps *caps;\nstatic virDomainXMLOption *xmlopt;\nstatic virVMXContext ctx;\nstatic void\ntestCapsInit(void)\n{\n", "label": "CODE"}, {"text": "        return -1;\n", "label": "CODE"}, {"text": "        return EXIT_FAILURE;\n# define DO_TEST_FULL(name, is_different, active, parse_flags) \\\n    do { \\\n        const struct testInfo info = {name, is_different, active, \\\n                                      parse_flags}; \\\n        if (virTestRun(\"LXC XML-2-XML \" name, \\\n                       testCompareXMLToXMLHelper, &info) < 0) \\\n            ret = -1; \\\n    } while (0)\n# define DO_TEST(name) \\\n    DO_TEST_FULL(name, 0, true, 0)\n# define DO_TEST_DIFFERENT(name) \\\n    DO_TEST_FULL(name, 1, true, 0)\n#include <config.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <fcntl.h>\n#include \"internal.h\"\n", "label": "CODE"}, {"text": "    while (*cur != 0) {\n        if (*cur == '<') {\n            *out++ = '&';\n", "label": "CODE"}, {"text": "    {\"arg1 myarg=no arg2=val2 myarg=yes arg4=val4 myarg=no arg5\", \"myarg\",  {\"a\", \"b\"},          VIR_KERNEL_CMDLINE_FLAGS_SEARCH_FIRST | VIR_KERNEL_CMDLINE_FLAGS_CMP_PREFIX, false },\n", "label": "CODE"}, {"text": "/* Common decls for cjpeg/djpeg applications */\n", "label": "NONCODE"}, {"text": "/*!\n            Removes a certain header\n        !*/\n", "label": "NONCODE"}, {"text": "// ---------------------------------------------------------------------------------------- \n", "label": "NONCODE"}, {"text": "/* PCI30 6.2.1 */\n/* Header type */\n", "label": "NONCODE"}, {"text": "/* Security manager labeled all devices, therefore\n     * if any operation from now on fails, we need to ask the caller to\n     * restore labels.\n     */\n", "label": "NONCODE"}, {"text": "/* Stores the complete backup metadata */\n", "label": "NONCODE"}, {"text": "/* Start Of Image (beginning of datastream) */\n/* End Of Image (end of datastream) */\n/* Start Of Scan (begins compressed data) */\n/* COMment */\n", "label": "NONCODE"}, {"text": "/* Required for the definition of FILE: */\n", "label": "NONCODE"}, {"text": "/* ignore -- will request binary anyway */\n", "label": "NONCODE"}, {"text": "/* common constants */\n", "label": "NONCODE"}, {"text": "/* USB2 controllers are the only exception to the simple\n             * \"assign the lowest unused index\". A group of USB2\n             * \"companions\" should all be at the same index as other\n             * USB2 controllers in the group, but only do this\n             * automatically if it appears to be the intent. To prove\n             * intent: the USB controller on the list just prior to\n             * this one must also be a USB2 controller, and there must\n             * not yet be a controller with the exact same model of\n             * this one and the same index as the previously added\n             * controller (e.g., if this controller is a UHCI1, then\n             * the previous controller must be an EHCI1 or a UHCI[23],\n             * and there must not already be a UHCI1 controller with\n             * the same index as the previous controller). If all of\n             * these are satisfied, set this controller to the same\n             * index as the previous controller.\n             */\n", "label": "NONCODE"}, {"text": "// make sure requires clause is not broken\n", "label": "NONCODE"}, {"text": "/*!\n            ensures\n                - returns point(right(), bottom()) \n                  (i.e. returns the bottom right corner point for this rectangle)\n        !*/\n", "label": "NONCODE"}, {"text": "// ----------------------------------------------------------------------------------------\n", "label": "NONCODE"}, {"text": "/* Runs in any thread context */\n", "label": "NONCODE"}, {"text": "/**\n * virDomainMemoryStatStruct:\n *\n * Since: 0.7.5\n */\n", "label": "NONCODE"}, {"text": "/**\n * virDomainEventPMSuspendedDetailType:\n *\n * Details on the cause of a 'pmsuspended' lifecycle event\n *\n * Since: 0.10.2\n */\n", "label": "NONCODE"}, {"text": "/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n * Exported API functions\n */\n", "label": "NONCODE"}, {"text": "/*\n *addHardDisksToMediaRegistry: Add a vboxSnapshotXmlHardDiskPtr to the registry as a\n *child of the disk whose uuid is 'parentHardDiskId'.\n *return 0 on success\n *return -1 on failure\n */\n", "label": "NONCODE"}, {"text": "/*!\n            ensures\n                - #get_seed() == seed\n        !*/\n", "label": "NONCODE"}, {"text": "/* ranges for NAT */\n", "label": "NONCODE"}, {"text": "/* Else lost a leading zero, so 'exp_b10' is\n                               * still ok at (-1)\n                               */\n", "label": "NONCODE"}, {"text": "// Copyright (C) 2008  Davis E. King (davis@dlib.net)\n// License: Boost Software License   See LICENSE.txt for the full license.\n", "label": "NONCODE"}, {"text": "/* try the list with flags support (0.10.2 and later) */\n", "label": "NONCODE"}, {"text": "/*!\n                requires\n                    - t != 0  (i.e. there must be something in the tree to remove)\n                ensures\n                    - the least node in t has been removed \n                    - the least node element in t has been put into #item \n                    - #t is still a binary search tree \n                    - returns false if the height of the tree has not changed \n                    - returns true if the height of the tree has shrunk by one\n            !*/\n", "label": "NONCODE"}, {"text": "/* Read the colormap from a Targa file */\n", "label": "NONCODE"}, {"text": "// This object you are trying to call matrix(length) on is not a column or \n// row vector.\n", "label": "NONCODE"}, {"text": "/* If we've run out of data, just leave the MCU set to zeroes.\n   * This way, we return uniform gray for the remainder of the segment.\n   */\n", "label": "NONCODE"}, {"text": "/* 'ramfb' property must be omitted unless it's to be enabled */\n", "label": "NONCODE"}, {"text": "/* Start of struct IGuestDebugControl declaration */\n", "label": "NONCODE"}, {"text": "/*\n * Copyright (C) 2011, 2014 Red Hat, Inc.\n *\n * This library is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 2.1 of the License, or (at your option) any later version.\n *\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with this library.  If not, see\n * <http://www.gnu.org/licenses/>.\n */\n", "label": "NONCODE"}, {"text": "/* 1 ms */\n", "label": "NONCODE"}, {"text": "/* If this was built on a system with LOCAL_PEERPID defined but\n         * the kernel doesn't support it we'll get back EOPNOTSUPP so\n         * treat all errors but EOPNOTSUPP as fatal\n         */\n", "label": "NONCODE"}, {"text": "// The location of the dot\n", "label": "NONCODE"}, {"text": "/*!\n            ensures\n                - moves item into *this.\n                - The exact move semantics are determined by which Storage type is used.  E.g. \n                  storage_heap will result in #item.is_empty()==true but storage_view would result\n                  in #item.is_empty() == false\n        !*/\n", "label": "NONCODE"}, {"text": "/*!A is_color_space_cartesian_image\n        A type traits class telling you if a type is an image holding some type of cartesian pixel type.\n\n        E.g. as contrasted with polar coordinates pixel types.\n    !*/\n", "label": "NONCODE"}, {"text": "// insert the bias \n", "label": "NONCODE"}, {"text": "/* since there is currently one default pool now\n     * and virStorageVolDefFormat() just checks it type\n     * so just assign it for now, change the behaviour\n     * when vbox supports pools.\n     */\n", "label": "NONCODE"}, {"text": "/* The error handling and memory handling information is left intact at this\n    * point: the jmp_buf may still have to be freed.  See png_destroy_png_struct\n    * for how this happens.\n    */\n", "label": "NONCODE"}, {"text": "/*!\n            ensures\n                - returns the feature extractor used by this object\n        !*/\n", "label": "NONCODE"}, {"text": "/**\n * virDomainCheckpointXMLFlags:\n *\n * Since: 5.6.0\n */\n", "label": "NONCODE"}, {"text": "/*!\n        requires\n            - image_scanner should be either scan_image_pyramid or scan_image_boxes and\n              should use the hashed_feature_image as its local feature extractor.\n        ensures\n            - #scanner.get_feature_extractor().uses_uniform_feature_weights() == true\n              (i.e. Make the scanner's feature extractor use the uniform feature weighting\n              scheme)\n    !*/\n", "label": "NONCODE"}, {"text": "// destroy objects by calling their destructor\n", "label": "NONCODE"}, {"text": "/* In this case, we need to send back the number of parameters\n     * supported\n     */\n", "label": "NONCODE"}, {"text": "/* c2-c6 */\n/* c6+c10 */\n/* c10 */\n/* c2 */\n", "label": "NONCODE"}, {"text": "// plug hole left by removing this node and free memory\n// plug hole with left subtree\n", "label": "NONCODE"}, {"text": "/* VBOX_WITH_GLUE */\n", "label": "NONCODE"}, {"text": "// We now can reinterpret_cast between py::ssize_t and Py_intptr_t (MSVC + PyPy cares)\n", "label": "NONCODE"}, {"text": "/* open session */\n", "label": "NONCODE"}, {"text": "/*\n     * NB, -nographic *MUST* come before any serial, or monitor\n     * or parallel port flags due to QEMU craziness, where it\n     * decides to change the serial port & monitor to be on stdout\n     * if you ask for nographic. So we have to make sure we override\n     * these defaults ourselves...\n     */\n", "label": "NONCODE"}]