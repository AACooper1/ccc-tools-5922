[{"text": "    'Sound\\\\Fx\\\\magic\\\\conjA.wav',\n", "label": "CODE"}, {"text": "        self._temp_prefix = temp_prefix\n", "label": "CODE"}, {"text": "        except OSError as e:\n", "label": "CODE"}, {"text": "                StatTestModel(related_field=aggr1, int1=1, int2=0),\n                StatTestModel(related_field=aggr1, int1=2, int2=1),\n                StatTestModel(related_field=aggr2, int1=3, int2=0),\n                StatTestModel(related_field=aggr2, int1=4, int2=1),\n            ]\n        )\n        qs = (\n            AggregateTestModel.objects.filter(pk__in=[aggr1.pk, aggr2.pk])\n            .annotate(\n                array=ArrayAgg(\"stattestmodel__int1\", filter=Q(stattestmodel__int2=0))\n", "label": "CODE"}, {"text": "                    self.style.NOTICE(\n", "label": "CODE"}, {"text": "        first_state = project_state.clone()\n", "label": "CODE"}, {"text": "            [self.author_empty], [self.author_with_db_table_comment]\n        )\n", "label": "CODE"}, {"text": "    'Sound\\\\Vo\\\\r\\\\f\\\\Hlo_RF089.mp3',\n", "label": "CODE"}, {"text": "                ('huey', 'purr'),\n                ('charlie', 'zai')])\n@requires_mysql\n@skip_if(mariadb is None, 'mariadb connector not installed')\n", "label": "CODE"}, {"text": "@isolate_apps(\"invalid_models_tests\")\nclass DbTableCommentTests(TestCase):\n", "label": "CODE"}, {"text": "        self.assertOutput(\n", "label": "CODE"}, {"text": "    'Scripts\\\\Source\\\\TIF__000B3DFE.psc',\n    'Scripts\\\\Source\\\\TIF__000B3DFF.psc',\n    'Scripts\\\\Source\\\\TIF__000B3E00.psc',\n    'Scripts\\\\Source\\\\TIF__000B3E3A.psc',\n    'Scripts\\\\Source\\\\TIF__000B3E01.psc',\n    'Scripts\\\\Source\\\\TIF__000B3E02.psc',\n    'Scripts\\\\Source\\\\TIF__000B3E03.psc',\n    'Scripts\\\\Source\\\\TIF__000B3E04.psc',\n    'Scripts\\\\Source\\\\TIF__000B3E05.psc',\n    'Scripts\\\\Source\\\\TIF__000B3E06.psc',\n    'Scripts\\\\Source\\\\TIF__000B3E25.psc',\n    'Scripts\\\\Source\\\\TIF__000B5D3A.psc',\n", "label": "CODE"}, {"text": "    size_hint_y: None\n", "label": "CODE"}, {"text": "        except ImportError:\n", "label": "CODE"}, {"text": "class Installers_IgnoreFomod(BoolLink):\n", "label": "CODE"}, {"text": "    minimum_required_version = self._Setting(\n        ('VCLinkerTool', 'MinimumRequiredVersion'), config, default='')\n    if minimum_required_version:\n      minimum_required_version = ',' + minimum_required_version\n    ld('SubSystem',\n       map={'1': 'CONSOLE%s' % minimum_required_version,\n", "label": "CODE"}, {"text": "    'Sound\\\\Vo\\\\d\\\\f\\\\tHlo_DF021.mp3',\n", "label": "CODE"}, {"text": "    config = self._TargetConfig(config)\n    if self.msvs_precompiled_header[config]:\n", "label": "CODE"}, {"text": "        except TypeError as e:\n            raise StateError(f'{self!r} not in long format') from e\n    def is_null(self):\n    internally for sorted lists which don't have a FormId but need to sort last.\n    NOTE: Not derived from FormId, since we want this to blow if FormId's other\n", "label": "CODE"}, {"text": "        w = Widget(disabled=None)\n        w.disabled = False\n        w.disabled = True\n        self.assertEqual(w.disabled, True)\nimport unittest\nclass FileWidgetWalk(unittest.TestCase):\n    def test_walk_large_tree(self):\n", "label": "CODE"}, {"text": "                \"mydate_month\": \"4\",\n", "label": "CODE"}, {"text": "import unittest\ntry:\n    from unittest.mock import patch   except:\n    from mock import patch   from kivy.utils import (boundary, escape_markup, format_bytes_to_human,\n        is_color_transparent, SafeList, get_random_color, get_hex_from_color,\n        get_color_from_hex, strtotuple, QueryDict, intersection, difference,\n        interpolate, _get_platform, deprecated, reify)\nfrom kivy import utils\n", "label": "CODE"}, {"text": "            ('huey', 'meow', 'mickey'),\n", "label": "CODE"}, {"text": "        apps = after_state.apps\n", "label": "CODE"}, {"text": "    return join(root, 'kivy', *args)\nclass CythonExtension(Extension):\n    def __init__(self, *args, **kwargs):\n        Extension.__init__(self, *args, **kwargs)\n        self.cython_directives = {\n            'c_string_encoding': 'utf-8',\n            'profile': 'USE_PROFILE' in environ,\n            'embedsignature': use_embed_signature,\n", "label": "CODE"}, {"text": "            ((ten, 3, 0, True), (1, 3), (10, 10)),\n", "label": "CODE"}, {"text": "        if sr_flags.full:\n", "label": "CODE"}, {"text": "        cls.inactive_user = User.objects.create_user(\n            \"inactive_user\",\n            \"baz@example.com\",\n            is_active=False,\n        )\n        cls.inactive_user.user_permissions.add(cls.permission)\n    def test_invalid_permission_name(self):\n        msg = \"Permission name should be in the form app_label.permission_codename.\"\n        for perm in (\"nodots\", \"too.many.dots\", \"...\", \"\"):\n            with self.subTest(perm), self.assertRaisesMessage(ValueError, msg):\n                User.objects.with_perm(perm)\n", "label": "CODE"}, {"text": "        self.options = {\n            option: value for option, value in options.items() if value is not None\n        }\n        expressions = (expression, query)\n        if config is not None:\n", "label": "CODE"}, {"text": "        with self.assertNumQueries(0):\n", "label": "CODE"}, {"text": "            default=\"test*.py\",\n            help=\"The test matching pattern. Defaults to test*.py.\",\n        )\n        parser.add_argument(\n            \"--keepdb\", action=\"store_true\", help=\"Preserves the test DB between runs.\"\n        )\n        parser.add_argument(\n            \"--shuffle\",\n", "label": "CODE"}, {"text": "            reverse(\"places\")\n", "label": "CODE"}, {"text": "            s = 30\n", "label": "CODE"}, {"text": "class Pet(models.Model):\n", "label": "CODE"}, {"text": "            BasePost.category,\n", "label": "CODE"}, {"text": "        \"urlobject-view\",\n        \"included_namespace_urls:testapp\",\n        \"included_namespace_urls:test-ns3\",\n", "label": "CODE"}, {"text": "        size_hint_y: None\n", "label": "CODE"}, {"text": "            b'CNAM': 'combat_style',\n", "label": "CODE"}, {"text": "            created=datetime(2022, 1, 1, 0, 0, 2),\n        )\n        cls.r1 = RelatedModel.objects.create(simple=cls.s1)\n        cls.r2 = RelatedModel.objects.create(simple=cls.s2)\n", "label": "CODE"}, {"text": "    'Sound\\\\Vo\\\\b\\\\f\\\\Hlo_BF078.mp3',\n", "label": "CODE"}, {"text": "    def contains_all(self, *keys):\n", "label": "CODE"}, {"text": "def _sqlite_datetime_cast_date(dt, tzname, conn_tzname):\n    dt = _sqlite_datetime_parse(dt, tzname, conn_tzname)\n    if dt is None:\n        return None\n    return dt.date().isoformat()\n", "label": "CODE"}, {"text": "    'Sound\\\\Vo\\\\n\\\\f\\\\Hlo_NF027.mp3',\n", "label": "CODE"}, {"text": "    @skipUnlessDBFeature(\"allows_group_by_lob\")\n    def test13c_count(self):\n        \"Testing `Count` aggregate with `.values()`.  See         qs = (\n            Location.objects.filter(id=5)\n", "label": "CODE"}, {"text": "    gyp.common.ExceptionAppend(e, 'while reading ' + build_file_path)\n", "label": "CODE"}, {"text": "    'Sound\\\\Vo\\\\b\\\\f\\\\Srv_BF009.mp3',\n", "label": "CODE"}, {"text": "        self.not_found('down')\n", "label": "CODE"}, {"text": "        self.assertEqual(options[0][\"name\"], \"name\")\n", "label": "CODE"}, {"text": "            return self.cursor\n", "label": "CODE"}, {"text": "        return token.token_text[1:-1]     elif ttag == _CHECKSUM:\n        return int(token.token_text, base=16)     elif ttag == _COMPARISON:\n        return Comparison(token.token_text)\n", "label": "CODE"}, {"text": " Needed for @total_ordering\n", "label": "NONCODE"}, {"text": " Assume business logic forces every person to have at least one house.\n", "label": "NONCODE"}, {"text": " Filter with band index transform.\n", "label": "NONCODE"}, {"text": " Return the hashed version to the file\n", "label": "NONCODE"}, {"text": " Test models appearing twice, and models appearing consecutively\n", "label": "NONCODE"}, {"text": " SQLite 3.8.9+ has 5 columns, however older versions only give 3\n columns. Discard last 2 columns if there.\n", "label": "NONCODE"}, {"text": " ..to apply each replacement pattern to the content\n", "label": "NONCODE"}, {"text": " Filters must never raise exceptionsm, so catch everything.\n", "label": "NONCODE"}, {"text": " If uninitialized, copy the wrapper. Use type(self), not\n self.__class__, because the latter is proxied.\n", "label": "NONCODE"}, {"text": " If a converter isn't specified, the default is `str`.\n", "label": "NONCODE"}, {"text": " GeoLite City database detected.\n", "label": "NONCODE"}, {"text": " Check if auto-generated name for the field is too long\n for the database.\n", "label": "NONCODE"}, {"text": " Fields with db_column = field name.\n", "label": "NONCODE"}, {"text": " sync iterator. Consume via sync_to_async and yield via async\n generator.\n", "label": "NONCODE"}, {"text": " To keep rendering order consistent, we can't just iterate over items().\n We need to sort the keys, and iterate over the sorted list.\n", "label": "NONCODE"}, {"text": " Check call to update_or_create() succeeded and the subsequent\n (blocked) call to update().\n", "label": "NONCODE"}, {"text": " Generating the field name for each field in the layer.\n", "label": "NONCODE"}, {"text": " Match found, reset index.\n", "label": "NONCODE"}, {"text": " SpatiaLite collapse to POINT.\n", "label": "NONCODE"}, {"text": " Reassigning the Restaurant object results in an immediate cache update\n We can't use a new Restaurant because that'll violate one-to-one, but\n with a new *instance* the is test below will fail if #6886 regresses.\n", "label": "NONCODE"}, {"text": " Arguments to reversed() must be reversible.\n", "label": "NONCODE"}, {"text": " rebaking doesn't change the rendered content\n", "label": "NONCODE"}, {"text": " Categories.\n", "label": "NONCODE"}, {"text": " Ignore any private attributes that Django doesn't care about.\n NOTE: We can't modify a dictionary's contents while looping\n over it, so we loop over the *original* dictionary instead.\n", "label": "NONCODE"}, {"text": " Is it currently being sorted on?\n", "label": "NONCODE"}, {"text": " field is a models.DateField\n", "label": "NONCODE"}, {"text": " The second page of results.\n", "label": "NONCODE"}, {"text": " DateTimeField rendered as_hidden() is special too\n", "label": "NONCODE"}, {"text": " Defer fields with only()\n", "label": "NONCODE"}, {"text": " If connection.operators is looked up before a connection has been\n created, transparently initialize connection.operators to avert an\n AttributeError.\n", "label": "NONCODE"}, {"text": " field is likely a ForeignObjectRel\n", "label": "NONCODE"}, {"text": " Disable auto-created table of contents entries for all domain objects (e.g.\n functions, classes, attributes, etc.) in Sphinx 5.2+.\n", "label": "NONCODE"}, {"text": " The related fetches are done in batches.\n", "label": "NONCODE"}, {"text": " Explicitly testing for the empty set, since we now always have sets.\n During removal (('col1', 'col2'),) --> () this becomes set([])\n", "label": "NONCODE"}, {"text": "\n flatatt #\n\n", "label": "NONCODE"}, {"text": " Expand the lazy instance, as it can cause issues when it is passed\n further to some Python functions like urlparse.\n", "label": "NONCODE"}, {"text": " But b__f1 does.\n", "label": "NONCODE"}, {"text": " Alter to set db_index=True and remove unique=True (should restore index)\n", "label": "NONCODE"}, {"text": " dot-atom\n", "label": "NONCODE"}, {"text": " This is a bug.\n", "label": "NONCODE"}, {"text": " on_each_side=0, on_ends=0\n", "label": "NONCODE"}, {"text": " Just the one form for existing instances\n", "label": "NONCODE"}, {"text": " Enclosure.\n", "label": "NONCODE"}, {"text": " Creating a LinearRing from a tuple, list, and numpy array\n", "label": "NONCODE"}, {"text": " The parsed result does a round trip to default format\n", "label": "NONCODE"}, {"text": " And test reversal\n", "label": "NONCODE"}, {"text": " Some models with a cycle in the default ordering. This would be bad if we\n didn't catch the infinite loop.\n", "label": "NONCODE"}, {"text": " the child->parent link\n", "label": "NONCODE"}, {"text": " A custom app registry to use, if you're making a separate model set.\n", "label": "NONCODE"}, {"text": " deleting the rock should delete the related tag.\n", "label": "NONCODE"}]